{"version":3,"file":"message-modal-preset.js","sourceRoot":"","sources":["../../../../../src/lib/plugins/bootstrap/presets/message-modal-preset.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAEL,UAAU,EACV,cAAc,EACd,MAAM,EACN,UAAU,EACX,MAAM,gBAAgB,CAAC;AACxB,OAAO,EACL,cAAc,EAGf,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAkB,qBAAqB,EAAE,MAAO,kBAAkB,CAAC;AAG1E,IAAM,cAAc,GAAG;IACrB,SAAS,EAAE,cAAc;IACzB,WAAW,EAAE,cAAc;IAC3B,SAAS,EAAE,YAAY;IACvB,WAAW,EAAE,cAAc;CAC5B,CAAC;AAEF,IAAM,eAAe,GAAG;IACtB,aAAa;IACb,OAAO;IACP,WAAW;IACX,WAAW;IACX,aAAa;CACd,CAAC;AA4DF;;;;GAIG;AACH;IACwD,6CAAwB;IAkD9E,mCAAY,aAA4B,EAC5B,cAAoC,EACpC,QAAiC;QAFjC,8BAAA,EAAA,yBAA4B;QAC5B,+BAAA,EAAA,0BAAoC;QACpC,yBAAA,EAAA,oBAAiC;QAF7C,YAGE,kBACE,MAAM,CAAM,MAAM,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,EAAE,cAAc,CAAC,EAAE,aAAa,IAAI,EAAE,CAAC,EACvE,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACT,SAGF;QADC,cAAc,CAAC,KAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;;IAChD,CAAC;IAED,6CAAS,GAAT,UAAU,GAAW,EAAE,OAAe,EAAE,OAAoC;QAC1E,IAAI,GAAG,GAAG;YACR,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,IAAI,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAkC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEtD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,gCAAC;AAAD,CAAC,AA3ED,CACwD,qBAAqB,GA0E5E","sourcesContent":["import {\n  FluentAssignMethod,\n  privateKey,\n  setAssignAlias,\n  extend,\n  arrayUnion\n} from 'angular2-modal';\nimport {\n  BSMessageModal,\n  BSMessageModalButtonConfig,\n  BSMessageModalButtonHandler\n} from '../message-modal.component';\nimport { BSModalContext, BSModalContextBuilder }  from '../modal-context';\n\n\nconst DEFAULT_VALUES = {\n  component: BSMessageModal,\n  headerClass: 'modal-header',\n  bodyClass: 'modal-body',\n  footerClass: 'modal-footer'\n};\n\nconst DEFAULT_SETTERS = [\n  'headerClass',\n  'title',\n  'titleHtml',\n  'bodyClass',\n  'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: string;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: string;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: string;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: string;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: string;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: string;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: string;\n\n  buttons: BSMessageModalButtonConfig[];\n  showInput?: any;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                extends BSModalContextBuilder<T> {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: FluentAssignMethod<string, this>;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: FluentAssignMethod<string, this>;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: FluentAssignMethod<string, this>;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: FluentAssignMethod<string, this>;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n\n    setAssignAlias(this, 'body', 'message', true);\n  }\n\n  addButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n    let btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let key = privateKey('buttons');\n    (this[key] as BSMessageModalButtonConfig[]).push(btn);\n\n    return this;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}