{"version":3,"file":"vc-ref-store.js","sourceRoot":"","sources":["../../../src/lib/models/vc-ref-store.ts"],"names":[],"mappings":"AAEA,IAAM,eAAe,GAA0C,EAAE,CAAC;AAGlE,kBAAkB,GAAW;IAC3B,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;AAClE,CAAC;AAED,kBAAkB,GAAW,EAAE,KAAuB;IACpD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAC5B,CAAC;IACD,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACnC,CAAC;AAED,kBAAkB,GAAW,EAAE,KAAwB;IACnD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACX,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAC5B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,EACjC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;AACL,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,CAAC","sourcesContent":["import { ViewContainerRef } from '@angular/core';\n\nconst vcRefCollection: { [key: string]: ViewContainerRef[] } = {};\n\n\nfunction getVCRef(key: string): ViewContainerRef[] {\n  return vcRefCollection[key] ? vcRefCollection[key].slice() : [];\n}\n\nfunction setVCRef(key: string, vcRef: ViewContainerRef): void {\n  if (!vcRefCollection.hasOwnProperty(key)) {\n    vcRefCollection[key] = [];\n  }\n  vcRefCollection[key].push(vcRef);\n}\n\nfunction delVCRef(key: string, vcRef?: ViewContainerRef): void {\n    if (!vcRef) {\n      vcRefCollection[key] = [];\n    } else {\n      const coll = vcRefCollection[key] || [],\n            idx = coll.indexOf(vcRef);\n      if (idx > -1) {\n        coll.splice(idx, 1);\n      }\n    }\n}\n\n/**\n * A Simple store that holds a reference to ViewContainerRef instances by a user defined key.\n * This, with the OverlayTarget directive makes it easy to block the overlay inside an element\n * without having to use the angular query boilerplate.\n * @type {{\n *  getVCRef: (function(string): ViewContainerRef), \n *  setVCRef: (function(string, ViewContainerRef): void), \n *  delVCRef: (function(string): void)\n *  }}\n */\nexport const vcRefStore = { getVCRef, setVCRef, delVCRef };\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}