{"version":3,"file":"modal-open-context.js","sourceRoot":"","sources":["../../../src/lib/models/modal-open-context.ts"],"names":[],"mappings":";;;;;AAIA,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAE3C,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAGpE,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAEhD,IAAM,eAAe,GAAG;IACtB,WAAW;CACZ,CAAC;AAEF;IAAsC,oCAAY;IAAlD;;IAGA,CAAC;IAAD,uBAAC;AAAD,CAAC,AAHD,CAAsC,YAAY,GAGjD;;AAED;;;;GAIG;AACH;IAC0B,2CAAsB;IAQ9C,iCAAY,aAA4B,EAC5B,cAAoC,EACpC,QAAiC;QAFjC,8BAAA,EAAA,yBAA4B;QAC5B,+BAAA,EAAA,0BAAoC;QACpC,yBAAA,EAAA,oBAAiC;eAC3C,kBACE,aAAa,IAAS,EAAE,EACxB,UAAU,CAAS,eAAe,EAAE,cAAc,IAAI,EAAE,CAAC,EACzD,QAAQ,CACT;IACH,CAAC;IAED;;;OAGG;IACO,8CAAY,GAAtB,UAAuB,MAAS;QAC9B,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,sCAAI,GAAJ,UAAK,aAAyB;QAC5B,IAAI,OAAO,GAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QAE/B,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAM,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC,CAAC;QACvF,CAAC;QAED,IAAI,aAAa,GAAkB;YACjC,OAAO,EAAE,OAAO;YAChB,aAAa,EAAE,aAAa;YAC5B,QAAQ,EAAE,OAAO,IAAI,CAAC,YAAY,KAAK,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;SAChF,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC9D,CAAC;IACH,8BAAC;AAAD,CAAC,AA/CD,CAC0B,mBAAmB,GA8C5C","sourcesContent":["import { ResolvedReflectiveProvider } from '@angular/core';\n\nimport { FluentAssignMethod } from '../framework/fluent-assign';\nimport { ModalComponent, OverlayConfig, WideVCRef } from './tokens';\nimport { Modal } from '../providers/index';\nimport { DialogRef } from './dialog-ref';\nimport { ModalContext, ModalContextBuilder } from './modal-context';\nimport { ModalControllingContextBuilder } from './overlay-context';\n\nimport { arrayUnion } from '../framework/utils';\n\nconst DEFAULT_SETTERS = [\n  'component'\n];\n\nexport class ModalOpenContext extends ModalContext {\n  component: any;\n  modal: Modal;\n}\n\n/**\n * A Modal Context that knows about the modal service, and so can open a modal window on demand.\n * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal\n * based on the context.\n */\nexport abstract class ModalOpenContextBuilder<T extends ModalOpenContext>\n                  extends ModalContextBuilder<T> implements ModalControllingContextBuilder<T> {\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  component: FluentAssignMethod<ModalComponent<T>, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n  }\n\n  /**\n   * Hook to alter config and return bindings.\n   * @param config\n   */\n  protected $$beforeOpen(config: T): ResolvedReflectiveProvider[] {\n    return [];\n  }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   * @returns Promise<DialogRef>\n   */\n  open(viewContainer?: WideVCRef): Promise<DialogRef<T>> {\n    let context: T = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      viewContainer: viewContainer,\n      bindings: typeof this.$$beforeOpen === 'function' && this.$$beforeOpen(context)\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}