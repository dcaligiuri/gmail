{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["../../../src/lib/models/dialog-ref.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { PromiseCompleter } from '../framework/utils';\nimport { Overlay, ModalOverlay } from '../overlay/index';\nimport { CloseGuard } from '../models/tokens';\nimport { DialogBailOutError } from '../models/errors';\n\n/**\n * API to an open modal window.\n */\nexport class DialogRef<T> {\n  /**\n   * Reference to the overlay component ref.\n   * @return {ComponentRef<ModalOverlay>}\n   */\n  overlayRef: ComponentRef<ModalOverlay>;\n\n  /**\n   * States if the modal is inside a specific element.\n   */\n  public inElement: boolean;\n\n  public destroyed: boolean;\n\n  /**\n   * Fired before dialog is destroyed.\n   * No need to unsubscribe, done automatically.\n   * Note: Always called.\n   * When called, overlayRef might or might not be destroyed.\n   */\n  public onDestroy: Observable<void>;\n\n  private _resultDeferred: PromiseCompleter<any> = new PromiseCompleter<any>();\n  private _onDestroy: Subject<void> = new Subject<void>();\n  private closeGuard: CloseGuard;\n\n  constructor(public overlay: Overlay, public context?: T) {\n    this.onDestroy = this._onDestroy.asObservable();\n  }\n\n  /**\n   * A Promise that is resolved on a close event and rejected on a dismiss event.\n   * @returns {Promise<T>|any|*|Promise<any>}\n   */\n  get result(): Promise<any> {\n    return this._resultDeferred.promise;\n  }\n\n  /**\n   * Set a close/dismiss guard\n   * @param g\n   */\n  setCloseGuard(guard: CloseGuard): void {\n    this.closeGuard = guard;\n  }\n\n  /**\n   *  Close the modal with a return value, i.e: result.\n   */\n  close(result: any = null) {\n    const _close = () => {\n      this.destroy();\n      this._resultDeferred.resolve(result);\n    };\n    this._fireHook<boolean>('beforeClose')\n      .then(value => value !== true && _close())\n      .catch(_close);\n  }\n\n  /**\n   *  Close the modal without a return value, i.e: cancelled.\n   *  This call is automatically invoked when a user either:\n   *  - Presses an exit keyboard key (if configured).\n   *  - Clicks outside of the modal window (if configured).\n   *  Usually, dismiss represent a Cancel button or a X button.\n   */\n  dismiss() {\n    const _dismiss = () => {\n      this.destroy();\n      this._resultDeferred.promise.catch(() => {});\n      this._resultDeferred.reject();\n    };\n    this._fireHook<boolean>('beforeDismiss')\n      .then(value => value !== true && _dismiss())\n      .catch(_dismiss);\n  }\n\n  /**\n   * Gracefully close the overlay/dialog with a rejected result.\n   * Does not trigger canDestroy on the overlay.\n   */\n  bailOut() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n      this._onDestroy.next(null);\n      this._onDestroy.complete();\n      this._resultDeferred.reject(new DialogBailOutError());\n    }\n  }\n\n  destroy() {\n    if (this.destroyed !== true) {\n      this.destroyed = true;\n\n      if (typeof this.overlayRef.instance.canDestroy === 'function') {\n        this.overlayRef.instance.canDestroy()\n          .catch( () => {})\n          .then ( () => this._destroy() );\n      } else {\n        this._destroy();\n      }\n    }\n  }\n\n  private _destroy(): void {\n    this._onDestroy.next(null);\n    this._onDestroy.complete();\n    this.overlayRef.destroy()\n  }\n\n  private _fireHook<T>(name: 'beforeClose' | 'beforeDismiss'): Promise<T> {\n    const gurad = this.closeGuard,\n          fn: Function = gurad && typeof gurad[name] === 'function' && gurad[name];\n\n    return Promise.resolve(fn ? fn.call(gurad) : false);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}