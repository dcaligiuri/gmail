{"version":3,"file":"swap-component.directive.js","sourceRoot":"","sources":["../../../src/lib/components/swap-component.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAEL,SAAS,EACT,KAAK,EACL,MAAM,EACN,kBAAkB,EAElB,gBAAgB,EAChB,wBAAwB,EACxB,YAAY,EACZ,WAAW,EACX,QAAQ,EACT,MAAM,eAAe,CAAC;AAEvB,uEAAuE;AACvE,6HAA6H;AAK7H,IAAa,sBAAsB;IAGjC,gCAAoB,GAA6B,EAC7B,KAAuB,EACvB,IAAyB;QAFzB,QAAG,GAAH,GAAG,CAA0B;QAC7B,UAAK,GAAL,KAAK,CAAkB;QACvB,SAAI,GAAJ,IAAI,CAAqB;QAOnC,aAAQ,GAAoC,IAAI,YAAY,CAAoB,KAAK,CAAC,CAAC;IANjG,CAAC;IAQQ,sBAAI,2CAAO;aAAX,UAAY,SAAc;YACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;gBAEjE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC3E,QAAQ,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;gBACtF,CAAC;gBAED,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CACvC,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,SAAS,CAAC,EAC3C,IAAI,CAAC,KAAK,CAAC,MAAM,EACjB,QAAQ,EACR,IAAI,CAAC,mBAAmB,CACzB,CAAC;gBAEF,MAAM,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;gBAEzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;;;OAAA;IACH,6BAAC;AAAD,CAAC,AApCD,IAoCC;AA5BU;IAAR,KAAK,EAAE;;+DAA+C;AAC9C;IAAR,KAAK,EAAE;8BAAkB,QAAQ;+DAAC;AAC1B;IAAR,KAAK,EAAE;;mEAA8B;AAE5B;IAAT,MAAM,EAAE;8BAAW,YAAY;wDAAiE;AAExF;IAAR,KAAK,EAAE;;;qDAqBP;AAnCU,sBAAsB;IAHlC,SAAS,CAAC;QACT,QAAQ,EAAE,WAAW;KACtB,CAAC;qCAIyB,wBAAwB;QACtB,gBAAgB;QACjB,WAAW;GAL1B,sBAAsB,CAoClC;SApCY,sBAAsB","sourcesContent":["import {\n  ComponentRef,\n  Directive,\n  Input,\n  Output,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  EventEmitter,\n  TemplateRef,\n  Injector\n} from '@angular/core';\n\n// <template [dynCmp]=\"myCmp\" [dynCmpBindings]=\"myBindings\"></template>\n// <template [dynCmp]=\"ctx.component\" [dynCmpBindings]=\"ctx.bindings\" [dynCmpProjectables]=\"ctx.projectableNodes\"></template>\n\n@Directive({\n  selector: '[swapCmp]'\n})\nexport class SwapComponentDirective {\n  private component: any;\n\n  constructor(private cfr: ComponentFactoryResolver,\n              private vcRef: ViewContainerRef,\n              private tRef: TemplateRef<Object>) {\n  }\n\n  @Input() swapCmpBindings: ResolvedReflectiveProvider[];\n  @Input() swapCmpInjector: Injector;\n  @Input() swapCmpProjectables: any[][];\n\n  @Output() onCreate: EventEmitter<ComponentRef<any>> = new EventEmitter<ComponentRef<any>>(false);\n\n  @Input() set swapCmp(component: any) {\n    this.component = component;\n    this.vcRef.clear();\n    if (this.component) {\n      let injector = this.swapCmpInjector || this.vcRef.parentInjector;\n\n      if (Array.isArray(this.swapCmpBindings) && this.swapCmpBindings.length > 0) {\n        injector = ReflectiveInjector.fromResolvedProviders(this.swapCmpBindings, injector);\n      }\n\n      const cmpRef = this.vcRef.createComponent(\n        this.cfr.resolveComponentFactory(component),\n        this.vcRef.length,\n        injector,\n        this.swapCmpProjectables\n      );\n\n      cmpRef.changeDetectorRef.detectChanges();\n\n      this.onCreate.emit(cmpRef);\n    }\n  }\n}\n\n// <component-linker [linkedComponent]=\"ctx.component\" [bindings]=\"ctx.bindings\"></component-linker>\n// @Component({\n//   selector: 'component-linker',\n//   template: ''\n// })\n// export class ComponentLinker {\n//\n//   @Input() linkedComponent: any;\n//   @Input() bindings: ResolvedReflectiveProvider[];\n//\n//   @Output() onCreate: EventEmitter<ComponentRef<any>> = new EventEmitter<ComponentRef<any>>(false);\n//   constructor(private vcRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {\n//\n//   }\n//\n//   ngAfterViewInit() {\n//     let injector = this.vcRef.parentInjector;\n//\n//     if (Array.isArray(this.bindings) && this.bindings.length > 0) {\n//       injector = ReflectiveInjector.fromResolvedProviders(this.bindings, injector);\n//     }\n//\n//     const cmpRef = this.vcRef.createComponent(\n//       this.cfr.resolveComponentFactory(this.linkedComponent),\n//       this.vcRef.length,\n//       injector\n//     );\n//\n//     cmpRef.changeDetectorRef.detectChanges();\n//\n//     this.onCreate.emit(cmpRef);\n//   }\n// }\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}