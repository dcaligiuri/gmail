{"version":3,"file":"dom-modal-renderer.js","sourceRoot":"","sources":["../../../src/lib/providers/dom-modal-renderer.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAIL,UAAU,EACV,kBAAkB,EACnB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAC/D,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAGhD,IAAa,kBAAkB;IAA/B;IAsBA,CAAC;IApBC,mCAAM,GAAN,UAAO,MAAsB,EAAE,KAAuB,EAAE,QAAmB;QACzE,IAAM,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC;YAC1C,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE;SACzC,CAAC,CAAC;QAEH,IAAM,MAAM,GAAG,eAAe,CAAC;YAC7B,SAAS,EAAE,YAAY;YACvB,KAAK,OAAA;YACL,QAAQ,UAAA;YACR,QAAQ,UAAA;SACT,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACrB,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACzE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,yBAAC;AAAD,CAAC,AAtBD,IAsBC;AAtBY,kBAAkB;IAD9B,UAAU,EAAE;GACA,kBAAkB,CAsB9B;SAtBY,kBAAkB","sourcesContent":["import {\n  ViewContainerRef,\n  ComponentRef,\n  Injector,\n  Injectable,\n  ReflectiveInjector\n} from '@angular/core';\n\nimport { createComponent } from '../framework/createComponent';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayRenderer } from '../models/tokens';\nimport { ModalOverlay } from '../overlay/index';\n\n@Injectable()\nexport class DOMOverlayRenderer implements OverlayRenderer {\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef, injector?: Injector): ComponentRef<ModalOverlay> {\n    const bindings = ReflectiveInjector.resolve([\n      { provide: DialogRef, useValue: dialog }\n    ]);\n\n    const cmpRef = createComponent({\n      component: ModalOverlay,\n      vcRef,\n      injector,\n      bindings\n    });\n\n    if (dialog.inElement) {\n      vcRef.element.nativeElement.appendChild(cmpRef.location.nativeElement);\n    } else {\n      document.body.appendChild(cmpRef.location.nativeElement);\n    }\n\n    return cmpRef;\n  }\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}