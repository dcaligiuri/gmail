{"version":3,"file":"overlay.component.js","sourceRoot":"","sources":["../../../src/lib/overlay/overlay.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,OAAO,EACL,SAAS,EAET,UAAU,EAGV,SAAS,EACT,gBAAgB,EAChB,iBAAiB,EACjB,QAAQ,EACR,WAAW,EAEZ,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAS3D;;GAEG;AAcH,IAAa,YAAY;IAAS,gCAAoB;IAKpD,sBAAoB,SAAyB,EACzB,GAAqB,EAC7B,EAAc,EACd,QAAkB;QAH9B,YAIE,kBAAM,EAAE,EAAE,QAAQ,CAAC,SAEpB;QANmB,eAAS,GAAT,SAAS,CAAgB;QACzB,SAAG,GAAH,GAAG,CAAkB;QAIvC,KAAI,CAAC,yBAAyB,EAAE,CAAC;;IACnC,CAAC;IAED;;OAEG;IACH,sCAAe,GAAf,UACE,OAA8C,EAC9C,QAAuC;QAGvC,IAAI,KAAY,CAAC;QACjB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAChC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,KAAG,OAAS,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,WAAW,CAAC,CAAC,CAAC;YAC1C,KAAK,GAAG;gBACN,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,oBAAoB;qBACxC,kBAAkB,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS;aACxE,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,KAAK,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;QACtF,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,qCAAc,GAAd,UAAe,MAA4B;QACzC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChD,SAAS,EAAE,MAAM;SAClB,CAAC,CAAC;IACL,CAAC;IAED,mCAAY,GAAZ,UAAgB,IAAS,EAAE,QAA2C,EAAE,gBAA8B;QAA3E,yBAAA,EAAA,aAA2C;QAAE,iCAAA,EAAA,qBAA8B;QACpG,MAAM,CAAC,iBAAM,aAAa,YAAI;YAC5B,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,QAAQ;YACpB,QAAQ,UAAA;YACR,gBAAgB,kBAAA;SACjB,CAAC,CAAC;IACL,CAAC;IAED,iCAAU,GAAV;QAAA,iBAUC;QATC,IAAM,KAAK,GAAG;YACZ,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,CAAC;YACR,SAAS,EAAE,IAAI;SAChB,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAE,CAAC;IAChE,CAAC;IAED,oCAAa,GAAb;QAAA,iBAYC;QAXC,IAAM,KAAK,GAAG;YACZ,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,CAAC;SACT,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAE,CAAC;IAChE,CAAC;IAED;;;;;;OAMG;IACH,uCAAgB,GAAhB,UAAiB,OAAgB;QAAjC,iBAsCC;QArCC,IAAI,MAAe,CAAC;QACpB,IAAM,UAAU,GAAG,UAAA,KAAK,IAAI,OAAA,MAAM,GAAG,KAAK,CAAC,MAAa,EAA5B,CAA4B,CAAC;QACzD,IAAM,WAAW,GAAG,UAAA,KAAK;YACvB,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,KAAI,CAAC,SAAS,CAAE,CAAC,CAAC,CAAC;gBAC5F,MAAM,CAAC;YACT,CAAC;YAED,IAAI,OAAO,GAAQ,KAAK,CAAC,MAAM,CAAC;YAEhC,2BAA2B;YAC3B,EAAE,CAAC,CAAC,OAAO,KAAK,MAAM,CAAC;gBAAC,MAAM,CAAC;YAE/B,kFAAkF;YAClF,4FAA4F;YAC5F,8DAA8D;YAC9D,GAAG,CAAC;gBACF,EAAE,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC;gBACT,CAAC;YACH,CAAC,QAAQ,OAAO,CAAC,UAAU,IAAI,CAAE,OAAO,GAAG,OAAO,CAAC,UAAU,CAAE,EAAE;YACjE,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;YACjC,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO,CAAC,mBAAmB,CAAC,YAAY,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAC7D,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;YAC1D,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAGH,UAAU,CAAC;YACT,OAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YACzD,OAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;YAC3D,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;YACvD,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,iCAAU,GAAV;QACE,IAAM,SAAS,GAAG,IAAI,gBAAgB,EAAQ,CAAC;QAE/C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC/C,SAAS,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YAEN,qDAAqD;YACrD,IAAI,IAAE,GAAG,UAAU,CAAC;gBAClB,IAAE,GAAG,IAAI,CAAC;gBACV,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,CAAC,EAAE,IAAI,CAAC,CAAC;YAET,IAAM,OAAO,GAAG;gBACd,EAAE,CAAC,CAAC,IAAE,KAAK,IAAI,CAAC;oBAAC,MAAM,CAAC;gBAExB,YAAY,CAAC,IAAE,CAAC,CAAC;gBACjB,SAAS,CAAC,OAAO,EAAE,CAAC;YACtB,CAAC,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAE,UAAA,EAAE,IAAI,OAAA,EAAE,EAAE,EAAJ,CAAI,CAAE,CAAC;iBACtD,IAAI,CAAC,OAAO,CAAC;iBACb,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpB,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACH,oCAAa,GAAb,UAAc,EAAuB;QACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IAED,uCAAgB,GAAhB,UAAiB,KAAoB;QACnC,kDAAkD;QAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAAC,MAAM,CAAC;QAG9D,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,kCAAW,GAAX;QACE,iBAAM,WAAW,WAAE,CAAC;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;YACtC,wFAAwF;YACxF,qFAAqF;YACrF,0FAA0F;YAC1F,6CAA6C;YAC7C,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AAlMD,CAAkC,oBAAoB,GAkMrD;AAhMmD;IAAjD,SAAS,CAAC,WAAW,EAAE,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;8BAAkB,gBAAgB;8CAAC;AAC7D;IAAtB,SAAS,CAAC,UAAU,CAAC;8BAAkB,WAAW;8CAAM;AAH9C,YAAY;IAbxB,SAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,IAAI,EAAE;YACJ,gBAAgB,EAAE,0BAA0B;SAC7C;QACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EACV,wNAIC;KACA,CAAC;qCAM+B,SAAS;QACf,gBAAgB;QACzB,UAAU;QACJ,QAAQ;GARnB,YAAY,CAkMxB;SAlMY,YAAY","sourcesContent":["declare const clearTimeout: any;\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  ResolvedReflectiveProvider,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Renderer,\n  TemplateRef,\n  Type\n} from '@angular/core';\n\nimport { PromiseCompleter, supportsKey } from '../framework/utils';\nimport { DialogRef } from '../models/dialog-ref';\nimport { BaseDynamicComponent } from '../components/index';\n\n\nexport interface EmbedComponentConfig {\n  component: any;\n  bindings?: ResolvedReflectiveProvider[];\n  projectableNodes?: any[][];\n}\n\n/**\n * Represents the modal overlay.\n */\n@Component({\n  selector: 'modal-overlay',\n  host: {\n    '(body:keydown)': 'documentKeypress($event)'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<template #innerView></template>\n<template #template let-ctx>\n    <template [swapCmp]=\"ctx.component\" [swapCmpBindings]=\"ctx.bindings\" [swapCmpProjectables]=\"ctx.projectableNodes\"></template>\n</template>\n`\n})\nexport class ModalOverlay extends BaseDynamicComponent {\n  private beforeDestroyHandlers: Array<() => Promise<void>>;\n  @ViewChild('innerView', {read: ViewContainerRef}) public innerVcr: ViewContainerRef;\n  @ViewChild('template') public template: TemplateRef<any>;\n\n  constructor(private dialogRef: DialogRef<any>,\n              private vcr: ViewContainerRef,\n              el: ElementRef,\n              renderer: Renderer) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n\n  /**\n   * @internal\n   */\n  getProjectables<T> (\n    content: string | TemplateRef<any> | Type<any>,\n    bindings?: ResolvedReflectiveProvider[]): any[][] {\n\n\n    let nodes: any[];\n    if (typeof content === 'string') {\n      nodes = [[this.renderer.createText(null, `${content}`)]];\n    } else if (content instanceof TemplateRef) {\n      nodes = [\n        this.dialogRef.overlay.defaultViewContainer\n          .createEmbeddedView(content, { dialogRef: this.dialogRef }).rootNodes\n      ];\n    } else {\n      nodes = [this.embedComponent({ component: content, bindings: bindings }).rootNodes];\n    }\n\n    return nodes;\n  }\n\n  embedComponent(config: EmbedComponentConfig): EmbeddedViewRef<EmbedComponentConfig> {\n    return this.vcr.createEmbeddedView(this.template, {\n      $implicit: config\n    });\n  }\n\n  addComponent<T>(type: any, bindings: ResolvedReflectiveProvider[] = [], projectableNodes: any[][] = []): ComponentRef<T> {\n    return super._addComponent<T>({\n      component: type,\n      vcRef: this.innerVcr,\n      bindings,\n      projectableNodes\n    });\n  }\n\n  fullscreen(): void {\n    const style = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      'z-index': 1500\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n  \n  insideElement(): void {\n    const style = {\n      position: 'absolute',\n      overflow: 'hidden',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    Object.keys(style).forEach( k => this.setStyle(k, style[k]) );\n  }\n\n  /**\n   * Define an element that click inside it will not trigger modal close.\n   * Since events bubble, clicking on a dialog will bubble up to the overlay, a plugin\n   * must define an element that represent the dialog, the overlay will make sure no to close when\n   * it was clicked.\n   * @param element\n   */\n  setClickBoundary(element: Element): void {\n    let target: Element;\n    const elListener = event => target = event.target as any;\n    const docListener = event => {\n      if (this.dialogRef.context.isBlocking || !this.dialogRef.overlay.isTopMost(this.dialogRef) ) {\n        return;\n      }\n\n      let current: any = event.target;\n\n      // on click, this will hit.\n      if (current === target) return;\n\n      // on mouse down -> drag -> release the current might not be 'target', it might be\n      // a sibling or a child (i.e: not part of the tree-up direction). It might also be a release\n      // outside the dialog... so we compare to the boundary element\n      do {\n        if (current === element) {\n          return;\n        }\n      } while (current.parentNode && ( current = current.parentNode ));\n      this.dialogRef.dismiss();\n    };\n\n    this.dialogRef.onDestroy.subscribe(() => {\n      element.removeEventListener('click', elListener, false);\n      element.removeEventListener('touchstart', elListener, false);\n      document.removeEventListener('click', docListener, false);\n      document.removeEventListener('touchend', docListener, false);\n    });\n\n\n    setTimeout(() => {\n      element.addEventListener('mousedown', elListener, false);\n      element.addEventListener('touchstart', docListener, false);\n      document.addEventListener('click', docListener, false);\n      document.addEventListener('touchend', docListener, false);\n    });\n  }\n\n  /**\n   * Temp workaround for animation where destruction of the top level component does not\n   * trigger child animations. Solution should be found either in animation module or in design\n   * of the modal component tree.\n   * @returns {Promise<void>}\n   */\n  canDestroy(): Promise<void> {\n    const completer = new PromiseCompleter<void>();\n\n    if (!Array.isArray(this.beforeDestroyHandlers)) {\n      completer.resolve();\n    } else {\n\n      // run destroy notification but protect against halt.\n      let id = setTimeout(() => {\n        id = null;\n        completer.reject();\n      }, 1000);\n\n      const resolve = () => {\n        if (id === null) return;\n\n        clearTimeout(id);\n        completer.resolve();\n      };\n\n      Promise.all(this.beforeDestroyHandlers.map( fn => fn() ))\n        .then(resolve)\n        .catch(resolve);\n\n    }\n\n    return completer.promise;\n  }\n\n  /**\n   * A handler running before destruction of the overlay\n   * use to delay destruction due to animation.\n   * This is part of the workaround for animation, see canDestroy.\n   * \n   * NOTE: There is no guarantee that the listeners will fire, use dialog.onDestory for that.\n   * @param fn\n   */\n  beforeDestroy(fn: () => Promise<void>) {\n    if (!this.beforeDestroyHandlers) {\n      this.beforeDestroyHandlers = [];\n    }\n    this.beforeDestroyHandlers.push(fn);\n  }\n  \n  documentKeypress(event: KeyboardEvent) {\n    // check that this modal is the last in the stack.\n    if (!this.dialogRef.overlay.isTopMost(this.dialogRef)) return;\n\n\n    if (supportsKey(event.keyCode, <any>this.dialogRef.context.keyboard)) {\n      this.dialogRef.dismiss();\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    if (this.dialogRef.destroyed !== true) {\n      // if we're here the overlay is destroyed by an external event that is not user invoked.\n      // i.e: The user did no call dismiss or close and dialogRef.destroy() did not invoke.\n      // this will happen when routing or killing an element containing a blocked overlay (ngIf)\n      // we bail out, i.e gracefully shutting down.\n      this.dialogRef.bailOut();\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}