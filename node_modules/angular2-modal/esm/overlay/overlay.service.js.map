{"version":3,"file":"overlay.service.js","sourceRoot":"","sources":["../../../src/lib/overlay/overlay.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ViewContainerRef, Injectable } from '@angular/core';\n\nimport { OverlayRenderer, OverlayConfig } from '../models/tokens';\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { DialogRef } from '../models/dialog-ref';\nimport { OverlayContext } from '../models/overlay-context';\n\nconst _stack = new DialogRefStack<any>();\n\n@Injectable()\nexport class Overlay {\n  /**\n   * A Default view container ref, usually the app root container ref.\n   * Make sure not to provide something that might get destroyed, it will destroy the modals too.\n   * The container is used as logical view holder, elements might be moved.\n   * Has to be set manually until we can find a way to get it automatically.\n   */\n  public defaultViewContainer: ViewContainerRef;\n\n  get stackLength(): number {\n    return _stack.length;\n  }\n\n  constructor(private _modalRenderer: OverlayRenderer) {\n  }\n\n  /**\n   * Check if a given DialogRef is the top most ref in the stack.\n   * TODO: distinguish between body modal vs in element modal.\n   * @param dialogRef\n   * @returns {boolean}\n   */\n  isTopMost(dialogRef: DialogRef<any>): boolean {\n    return _stack.indexOf(dialogRef) === _stack.length - 1;\n  }\n\n  stackPosition(dialogRef: DialogRef<any>) {\n    return _stack.indexOf(dialogRef);\n  }\n\n  groupStackLength(dialogRef: DialogRef<any>): number {\n    return _stack.groupLength(_stack.groupOf(dialogRef));\n  }\n\n\n  /**\n   * Creates an overlay and returns a dialog ref.\n   * @param config instructions how to create the overlay\n   * @param group A token to associate the new overlay with, used for reference (stacks usually)\n   * @returns {DialogRef<T>[]}\n   */\n  open<T extends OverlayContext>(config: OverlayConfig, group?: any): DialogRef<T>[] {\n    let viewContainer = config.viewContainer,\n        containers: Array<ViewContainerRef> = [];\n\n    if (typeof viewContainer === 'string') {\n      containers = vcRefStore.getVCRef(viewContainer as string);\n    } else if (Array.isArray(viewContainer)) {\n      containers = viewContainer as any;\n    } else if (viewContainer) {\n      containers = [viewContainer] as any;\n    }\n\n    if (!containers || !containers[0]) {\n      if (!this.defaultViewContainer) {\n        throw new Error('Default view container not set. Add the \"defaultOverlayTarget\" directive ' +\n          'to the application root component template (e.g: <span defaultOverlayTarget></span>. ' +\n          'You can also set it manually using the \"Overlay\" service \"defaultViewContainer\" property.');\n      }\n      containers = [this.defaultViewContainer];\n    }\n\n    return containers\n      .map( vc => this.createOverlay(config.renderer || this._modalRenderer, vc, config, group));\n  }\n\n  private createOverlay(renderer: OverlayRenderer,\n                        vcRef: ViewContainerRef,\n                        config: OverlayConfig,\n                        group: any): DialogRef<any> {\n    if (config.context) {\n      config.context.normalize();\n    }\n\n    let dialog = new DialogRef<any>(this, config.context || {});\n    dialog.inElement = config.context && !!config.context.inElement;\n\n    let cmpRef = renderer.render(dialog, vcRef, config.injector);\n\n    Object.defineProperty(dialog, 'overlayRef', {value: cmpRef});\n    _stack.pushManaged(dialog, group);\n\n    return dialog;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}