{"version":3,"file":"overlay.directives.js","sourceRoot":"","sources":["../../../src/lib/overlay/overlay.directives.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,gBAAgB,EAEjB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C;;;;GAIG;AAIH,IAAa,qBAAqB;IAChC,+BAAY,EAAc,EAAE,SAAyB;QACnD,EAAE,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAEH,4BAAC;AAAD,CAAC,AAPD,IAOC;AAPY,qBAAqB;IAHjC,SAAS,CAAC;QACT,QAAQ,EAAE,yBAAyB;KACpC,CAAC;qCAEgB,UAAU,EAAa,SAAS;GADrC,qBAAqB,CAOjC;SAPY,qBAAqB;AAYlC,IAAa,aAAa;IAUxB,uBAAoB,KAAuB;QAAvB,UAAK,GAAL,KAAK,CAAkB;IAAG,CAAC;IATvB,sBAAI,oCAAS;aAAb,UAAc,KAAa;YACjD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;;;OAAA;IAMD,mCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AAjBD,IAiBC;AAhByB;IAAvB,KAAK,CAAC,eAAe,CAAC;;;8CAKtB;AANU,aAAa;IAHzB,SAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;KAC5B,CAAC;qCAW2B,gBAAgB;GAVhC,aAAa,CAiBzB;SAjBY,aAAa;AAmB1B,IAAM,IAAI,GAAG,cAAO,CAAC,CAAC;AAItB,IAAa,oBAAoB;IAC/B,8BAAoB,OAAgB,EAAE,KAAuB;QAAzC,YAAO,GAAP,OAAO,CAAS;QAClC,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;IACvC,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAChD,CAAC;IACH,2BAAC;AAAD,CAAC,AARD,IAQC;AARY,oBAAoB;IAHhC,SAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;KACnC,CAAC;qCAE6B,OAAO,EAAS,gBAAgB;GADlD,oBAAoB,CAQhC;SARY,oBAAoB","sourcesContent":["import {\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy\n} from '@angular/core';\n\nimport { DialogRef } from '../models/dialog-ref';\nimport { vcRefStore } from '../models/vc-ref-store';\nimport { Overlay } from \"./overlay.service\";\n\n/**\n * A directive use to signal the overlay that the host of this directive\n * is a dialog boundary, i.e: over click outside of the element should close the modal\n * (if non blocking)\n */\n@Directive({\n  selector: '[overlayDialogBoundary]'\n})\nexport class OverlayDialogBoundary {\n  constructor(el: ElementRef, dialogRef: DialogRef<any>) {\n    if (dialogRef && el.nativeElement) {\n      dialogRef.overlayRef.instance.setClickBoundary(el.nativeElement);\n    }\n  }\n\n}\n\n@Directive({\n  selector: '[overlayTarget]'\n})\nexport class OverlayTarget implements OnDestroy {\n  @Input('overlayTarget') set targetKey(value: string) {\n    this._targetKey = value;\n    if (value) {\n      vcRefStore.setVCRef(value, this.vcRef);\n    }\n  }\n\n  private _targetKey: string;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnDestroy() {\n    if (this._targetKey) {\n      vcRefStore.delVCRef(this._targetKey, this.vcRef);\n    }\n  }\n}\n\nconst noop = () => {};\n@Directive({\n  selector: '[defaultOverlayTarget]'\n})\nexport class DefaultOverlayTarget implements OnDestroy {\n  constructor(private overlay: Overlay, vcRef: ViewContainerRef) {\n    overlay.defaultViewContainer = vcRef;\n  }\n\n  ngOnDestroy() {\n    this.overlay.defaultViewContainer = undefined;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}