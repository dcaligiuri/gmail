"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ContextmenuComponent = (function () {
    function ContextmenuComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.context = {};
        this.isVisible = false;
    }
    ContextmenuComponent.prototype.show = function (x, y) {
        this.renderer.setElementStyle(this.element.nativeElement, 'left', x + "px");
        this.renderer.setElementStyle(this.element.nativeElement, 'top', y + "px");
        this.isVisible = true;
    };
    ContextmenuComponent.prototype.hide = function () {
        this.isVisible = false;
    };
    ContextmenuComponent.prototype.setContext = function (context) {
        this.context = context;
    };
    ContextmenuComponent.prototype.get = function (path) {
        return this.baseGet(this.context, path) || '';
    };
    // This function is borrowed from lodash
    // https://github.com/lodash/lodash/blob/master/lodash.js
    // Copyright JS Foundation and other contributors <https://js.foundation/>
    ContextmenuComponent.prototype.baseGet = function (object, path) {
        path = Array.isArray(path) ? path : path.split('.');
        var index = 0;
        var length = path.length;
        while (object != null && index < length) {
            object = object[(path[index++])];
        }
        return (index && index === length) ? object : undefined;
    };
    ContextmenuComponent.prototype.onClick = function () {
        this.hide();
    };
    ContextmenuComponent.prototype.onScroll = function () {
        this.hide();
    };
    ;
    return ContextmenuComponent;
}());
__decorate([
    core_1.Input('id'),
    __metadata("design:type", String)
], ContextmenuComponent.prototype, "id", void 0);
__decorate([
    core_1.HostListener('document:click', []),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ContextmenuComponent.prototype, "onClick", null);
__decorate([
    core_1.HostListener('document:scroll', []),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ContextmenuComponent.prototype, "onScroll", null);
ContextmenuComponent = __decorate([
    core_1.Component({
        selector: 'contextmenu',
        template: "\n    <div class=\"contextmenu\">\n      <ng-content></ng-content>\n    </div>\n  ",
        styles: [
            ":host(.contextmenu-container) {\n        display: none;\n        position: fixed;\n        z-index: 1300;\n    }",
            ":host(.contextmenu-container.show) {\n        display: block;\n      }\n    "
        ],
        host: {
            '[class.contextmenu-container]': '1',
            '[class.show]': 'isVisible'
        }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer])
], ContextmenuComponent);
exports.ContextmenuComponent = ContextmenuComponent;
